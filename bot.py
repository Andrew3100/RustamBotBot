from db import *
import telebot
from lib import *
import time
from telebot import *


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞ 0 –ø–æ–∫–∞ –º—ã –Ω–µ —É–∑–Ω–∞–ª–∏, —á—Ç–æ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ username
none_username = 0
# –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
user_card_number = 0
# —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
summ_from_user = 0
# –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
change_pair = 0
# —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
status = 0

mess_id = 0
pol = 0


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É
DB = connect_to_db(connect)



# —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot('6146642902:AAHA02ejfF5QUA7JK-vOfUN63Z1c9Tvwdb4')

@bot.message_handler(commands=['start', 'help'],content_types=['text'])
def check_user(message):
    global none_username, mess_id,connect,DB
    if message.from_user.username == None:
        bot.send_message(message.from_user.id, "–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–≤–æ—ë–º TelegramüôÇ")
        none_username = 1
    uid = (search_uid_by_telegram_username(message.from_user.username,DB))
    check_order = (check_orders_userid(uid,DB))
    if none_username == 0:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫
        if check_order == False and status < 4:
            create_user_if_not_exists(DB,message,bot,types)
            keyboard = types.InlineKeyboardMarkup()
            # —Å–±–æ—Ä –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –æ–±–º–µ–Ω–∞
            DB = connect_to_db(connect)
            with DB.cursor() as db:
                currency_pairs = f'SELECT * FROM currency_pairs WHERE status = 1'
                currency_pairs = db.execute(currency_pairs)
                currency_pairs = db.fetchall()
                for currency_pair in currency_pairs:
                    keyboard.add(types.InlineKeyboardButton(text=str(currency_pair['name']),
                                                            callback_data=str(str(currency_pair['id']) + '_pair_id')))
            bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –æ–±–º–µ–Ω–æ–º –≤–∞–ª—é—Ç."
                                                f" –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.", reply_markup=keyboard)
            DB.close()
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', callback_data='check_order'))
            mess_id = bot.send_message(message.from_user.id,
                             f"{message.from_user.first_name}, –Ω–∞ —Ç–µ–±—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞. –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –º–æ–∂–µ–º –¥–µ—Ä–∂–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"
                             f"", reply_markup=keyboard).id
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(message, get_card)

def get_card(message):
    global user_card_number
    if message.text != '/start':

        if message.text.isdigit() == False:
            bot.send_message(message.from_user.id,
                             f"{message.from_user.first_name}, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(message, get_card)
        else:
            bot.send_message(message.from_user.id,
                             f"–û—Ç–ª–∏—á–Ω–æ!")
            user_card_number = message.text
            bot.send_message(message.from_user.id, f'–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.')
            bot.register_next_step_handler(message, get_summ)


def get_summ(message):
    global summ_from_user,change_pair,DB,connect
    import datetime
    if message.text != '/start':
        if message.text.isdigit() == False:
            bot.send_message(message.from_user.id,
                             f"{message.from_user.first_name}, —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(message, get_summ)
        else:
            # —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ
            username = message.from_user.username
            created = time.time()
            summ_from_user = message.text
            # —Å–º–æ—Ç—Ä–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ username
            see_uid = f"SELECT * FROM users WHERE telegram_username = '{username}'"
            DB = connect_to_db(connect)
            with DB.cursor() as db:
                db.execute(see_uid)
                data = db.fetchall()
                for content in data:
                    userid = content['id']
            DB.close()
            DB = connect_to_db(connect)
            create_order_sql = f"INSERT INTO orders (tg_user_id,pair_id,summ,created,client_bank_card_number) VALUES ('{userid}','{change_pair}','{summ_from_user}','{created}','{user_card_number}')"
            # create_push_sql = f"INSERT INTO orders (tg_user_id,pair_id,summ,created,client_bank_card_number) VALUES ('{userid}','{change_pair}','{summ_from_user}','{created}','{user_card_number}')"
            with DB.cursor() as db:
                db.execute(create_order_sql)
                lr = db.lastrowid
                date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
                create_push_sql = f"INSERT INTO request_money_log (`order`,`last`,`date`) VALUES ('{lr}','1','{date}')"
                print(create_push_sql)

                db.execute(create_push_sql)
                DB.commit()
            DB.close()
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å '
                                                         '—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', callback_data='check_order'))
            bot.send_message(message.from_user.id,
                             f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                             reply_markup=keyboard)
            # bot.register_next_step_handler(message)


def check_order_status(message):
    global user_card_number, summ_from_user
    if user_card_number != 0 and summ_from_user !=0:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å '
                                                     '—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', callback_data='check_order'))
        bot.send_message(message.from_user.id,
                         f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω —Å–æ–∑–¥–∞–Ω–∞. –° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –†—É—Å—Ç–∞–º —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",reply_markup=keyboard)



@bot.callback_query_handler(func=lambda call: True)
def start(call):
    global change_pair,status, mess_id, pol,connect
    if '_pair_id' in call.data:

        id = call.data.split('_')[0] # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –∏–∑ –ë–î
        change_pair = id
        DB = connect_to_db(connect)
        with DB.cursor() as db:
            currency_pairs_courses = f'SELECT * FROM currency_pairs_courses WHERE pair_id = {id}'
            currency_pairs_courses = db.execute(currency_pairs_courses)
            currency_pairs_courses = db.fetchall()
            for currency_pairs_course in currency_pairs_courses:
                course = str(currency_pairs_course['value'])
        DB.close()
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='create_order'))
        keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='0'))
        bot.send_message(call.message.chat.id, f'–ö—É—Ä—Å –ø–æ –¥–∞–Ω–Ω–æ–π –ø–∞—Ä–µ —Ä–∞–≤–µ–Ω {course}. –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω?',
                         reply_markup=keyboard)
    if 'create_order' in call.data:
        bot.send_message(call.message.chat.id, f'–£—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.')


    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏
    if 'check_order' in call.data:
        DB = connect_to_db(connect)
        # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ username —Ç–µ–ª–µ–≥–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏–º –ø–æ–¥ –∫–∞–∫–∏–º –ò–î –æ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
        with DB.cursor() as db:
            user_id = f"SELECT * FROM users WHERE telegram_username = '{call.from_user.username}'"
            user_id = db.execute(user_id)
            user_id = db.fetchall()
            DB.cursor().close()
            for userid in user_id:
                user__id = userid['id']
        DB.close()
        DB = connect_to_db(connect)
        with DB.cursor() as db:
            user__id = search_uid_by_telegram_username(call.from_user.username,DB)
            username_order_sql = f'SELECT ' \
                             f'ord.id, ord.pair_id, ord.tg_user_id, refst.name, ord.summ, ROUND(ord.summ / courses.value) as value, DATE_FORMAT(FROM_UNIXTIME(ord.created),"%d-%m-%Y, %H:%i:%s") as created, ord.client_bank_card_number' \
                             f' FROM orders ord ' \
                             f' INNER JOIN order_ref_status refst ON refst.id = ord.status_id' \
                             f' INNER JOIN currency_pairs_courses courses ON courses.pair_id = ord.pair_id' \
                             f' WHERE ord.tg_user_id = {user__id} AND refst.id != 4'
            username_order_data = db.execute(username_order_sql)
            username_order_fetch = db.fetchall()

            if username_order_fetch:
                for order in username_order_fetch:
                    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É —Å–µ–π—á–∞—Å –≤–∏—Å–∏—Ç (–∑–∞—è–≤–∫–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π, –ø–æ —Ç–µ–∫—É—â–µ–π –í–ü –∏ —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Å—Ç–∞—Ç—É—Å–æ–º)
                    count_orders = db.execute(f"SELECT count(*) FROM orders WHERE id < {order['id']} AND status_id != 4 AND pair_id = {order['pair_id']}")
                    answer = f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {order['created']}\n" \
                             f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {order['name']}\n" \
                             f"–£–∫–∞–∑–∞–Ω–Ω–∞—è –í–∞–º–∏ –∫–∞—Ä—Ç–∞: {order['client_bank_card_number']}\n" \
                             f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {order['summ']}\n" \
                             f"–ü–µ—Ä–µ–¥ –í–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: {count_orders} –∑–∞—è–≤–∫–∞(-–≤–æ–∫) –Ω–∞ –æ–±–º–µ–Ω\n" \
                             f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ –∫–æ–Ω–µ—á–Ω–æ–π –≤–∞–ª—é—Ç–µ: {order['value']}\n" \
                             f"/start"
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text=f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å '
                                                             f'—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', callback_data='check_order'))
                bot.send_message(call.message.chat.id, answer,reply_markup=keyboard)

            else:
                answer = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
                bot.send_message(call.message.chat.id, answer)
        DB.close()

bot.polling(none_stop=True)
